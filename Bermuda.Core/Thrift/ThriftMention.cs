/**
 * Autogenerated by Thrift Compiler (0.7.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Transport;

namespace Bermuda.Core.Thrift
{

    [Serializable]
    public partial class ThriftMention : TBase
    {
        private string _Name;
        private string _Description;
        private List<int> _Tags;
        private double _Sentiment;
        private double _Influence;
        private long _OccurredOnTicks;
        private long _CreatedOnTicks;
        private string _Guid;

        public string Name
        {
            get
            {
                return _Name;
            }
            set
            {
                __isset.Name = true;
                this._Name = value;
            }
        }

        public string Description
        {
            get
            {
                return _Description;
            }
            set
            {
                __isset.Description = true;
                this._Description = value;
            }
        }

        public List<int> Tags
        {
            get
            {
                return _Tags;
            }
            set
            {
                __isset.Tags = true;
                this._Tags = value;
            }
        }

        public double Sentiment
        {
            get
            {
                return _Sentiment;
            }
            set
            {
                __isset.Sentiment = true;
                this._Sentiment = value;
            }
        }

        public double Influence
        {
            get
            {
                return _Influence;
            }
            set
            {
                __isset.Influence = true;
                this._Influence = value;
            }
        }

        public long OccurredOnTicks
        {
            get
            {
                return _OccurredOnTicks;
            }
            set
            {
                __isset.OccurredOnTicks = true;
                this._OccurredOnTicks = value;
            }
        }

        public long CreatedOnTicks
        {
            get
            {
                return _CreatedOnTicks;
            }
            set
            {
                __isset.CreatedOnTicks = true;
                this._CreatedOnTicks = value;
            }
        }

        public string Guid
        {
            get
            {
                return _Guid;
            }
            set
            {
                __isset.Guid = true;
                this._Guid = value;
            }
        }


        public Isset __isset;
        [Serializable]
        public struct Isset
        {
            public bool Name;
            public bool Description;
            public bool Tags;
            public bool Sentiment;
            public bool Influence;
            public bool OccurredOnTicks;
            public bool CreatedOnTicks;
            public bool Guid;
        }

        public ThriftMention()
        {
        }

        public void Read(TProtocol iprot)
        {
            TField field;
            iprot.ReadStructBegin();
            while (true)
            {
                field = iprot.ReadFieldBegin();
                if (field.Type == TType.Stop)
                {
                    break;
                }
                switch (field.ID)
                {
                    case 1:
                        if (field.Type == TType.String)
                        {
                            Name = iprot.ReadString();
                        }
                        else
                        {
                            TProtocolUtil.Skip(iprot, field.Type);
                        }
                        break;
                    case 2:
                        if (field.Type == TType.String)
                        {
                            Description = iprot.ReadString();
                        }
                        else
                        {
                            TProtocolUtil.Skip(iprot, field.Type);
                        }
                        break;
                    case 3:
                        if (field.Type == TType.List)
                        {
                            {
                                Tags = new List<int>();
                                TList _list0 = iprot.ReadListBegin();
                                for (int _i1 = 0; _i1 < _list0.Count; ++_i1)
                                {
                                    int _elem2 = 0;
                                    _elem2 = iprot.ReadI32();
                                    Tags.Add(_elem2);
                                }
                                iprot.ReadListEnd();
                            }
                        }
                        else
                        {
                            TProtocolUtil.Skip(iprot, field.Type);
                        }
                        break;
                    case 4:
                        if (field.Type == TType.Double)
                        {
                            Sentiment = iprot.ReadDouble();
                        }
                        else
                        {
                            TProtocolUtil.Skip(iprot, field.Type);
                        }
                        break;
                    case 5:
                        if (field.Type == TType.Double)
                        {
                            Influence = iprot.ReadDouble();
                        }
                        else
                        {
                            TProtocolUtil.Skip(iprot, field.Type);
                        }
                        break;
                    case 6:
                        if (field.Type == TType.I64)
                        {
                            OccurredOnTicks = iprot.ReadI64();
                        }
                        else
                        {
                            TProtocolUtil.Skip(iprot, field.Type);
                        }
                        break;
                    case 7:
                        if (field.Type == TType.I64)
                        {
                            CreatedOnTicks = iprot.ReadI64();
                        }
                        else
                        {
                            TProtocolUtil.Skip(iprot, field.Type);
                        }
                        break;
                    case 8:
                        if (field.Type == TType.String)
                        {
                            Guid = iprot.ReadString();
                        }
                        else
                        {
                            TProtocolUtil.Skip(iprot, field.Type);
                        }
                        break;
                    default:
                        TProtocolUtil.Skip(iprot, field.Type);
                        break;
                }
                iprot.ReadFieldEnd();
            }
            iprot.ReadStructEnd();
        }

        public void Write(TProtocol oprot)
        {
            TStruct struc = new TStruct("ThriftMention");
            oprot.WriteStructBegin(struc);
            TField field = new TField();
            if (Name != null && __isset.Name)
            {
                field.Name = "Name";
                field.Type = TType.String;
                field.ID = 1;
                oprot.WriteFieldBegin(field);
                oprot.WriteString(Name);
                oprot.WriteFieldEnd();
            }
            if (Description != null && __isset.Description)
            {
                field.Name = "Description";
                field.Type = TType.String;
                field.ID = 2;
                oprot.WriteFieldBegin(field);
                oprot.WriteString(Description);
                oprot.WriteFieldEnd();
            }
            if (Tags != null && __isset.Tags)
            {
                field.Name = "Tags";
                field.Type = TType.List;
                field.ID = 3;
                oprot.WriteFieldBegin(field);
                {
                    oprot.WriteListBegin(new TList(TType.I32, Tags.Count));
                    foreach (int _iter3 in Tags)
                    {
                        oprot.WriteI32(_iter3);
                    }
                    oprot.WriteListEnd();
                }
                oprot.WriteFieldEnd();
            }
            if (__isset.Sentiment)
            {
                field.Name = "Sentiment";
                field.Type = TType.Double;
                field.ID = 4;
                oprot.WriteFieldBegin(field);
                oprot.WriteDouble(Sentiment);
                oprot.WriteFieldEnd();
            }
            if (__isset.Influence)
            {
                field.Name = "Influence";
                field.Type = TType.Double;
                field.ID = 5;
                oprot.WriteFieldBegin(field);
                oprot.WriteDouble(Influence);
                oprot.WriteFieldEnd();
            }
            if (__isset.OccurredOnTicks)
            {
                field.Name = "OccurredOnTicks";
                field.Type = TType.I64;
                field.ID = 6;
                oprot.WriteFieldBegin(field);
                oprot.WriteI64(OccurredOnTicks);
                oprot.WriteFieldEnd();
            }
            if (__isset.CreatedOnTicks)
            {
                field.Name = "CreatedOnTicks";
                field.Type = TType.I64;
                field.ID = 7;
                oprot.WriteFieldBegin(field);
                oprot.WriteI64(CreatedOnTicks);
                oprot.WriteFieldEnd();
            }
            if (Guid != null && __isset.Guid)
            {
                field.Name = "Guid";
                field.Type = TType.String;
                field.ID = 8;
                oprot.WriteFieldBegin(field);
                oprot.WriteString(Guid);
                oprot.WriteFieldEnd();
            }
            oprot.WriteFieldStop();
            oprot.WriteStructEnd();
        }

        public override string ToString()
        {
            StringBuilder sb = new StringBuilder("ThriftMention(");
            sb.Append("Name: ");
            sb.Append(Name);
            sb.Append(",Description: ");
            sb.Append(Description);
            sb.Append(",Tags: ");
            sb.Append(Tags);
            sb.Append(",Sentiment: ");
            sb.Append(Sentiment);
            sb.Append(",Influence: ");
            sb.Append(Influence);
            sb.Append(",OccurredOnTicks: ");
            sb.Append(OccurredOnTicks);
            sb.Append(",CreatedOnTicks: ");
            sb.Append(CreatedOnTicks);
            sb.Append("Guid: ");
            sb.Append(Guid);
            sb.Append(")");
            return sb.ToString();
        }

    }

}
